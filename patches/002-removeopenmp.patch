diff --git a/mux/mux.cpp b/mux.cpp
index 4e721ca..604789a 100644
--- a/mux/mux.cpp
+++ b/mux.cpp
@@ -2,7 +2,7 @@
  * \file mux.cpp
  * \brief Unite traffic incoming on multiple interface into one output stream (input for demux module).
  * \author Dominik Soukup <soukudom@fit.cvut.cz>
- * \date 2018
+ * \date 1/2018
  */
 /*
  * Copyright (C) 2018 CESNET
@@ -22,6 +22,11 @@
  *    may be used to endorse or promote products derived from this
  *    software without specific prior written permission.
  *
+ * ALTERNATIVELY, provided that this notice is retained in full, this
+ * product may be distributed under the terms of the GNU General Public
+ * License (GPL) version 2 or later, in which case the provisions
+ * of the GPL apply INSTEAD OF those given above.
+ *
  * This software is provided ``as is'', and any express or implied
  * warranties, including, but not limited to, the implied warranties of
  * merchantability and fitness for a particular purpose are disclaimed.
@@ -36,229 +41,272 @@
  *
  */
 
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
 
-#include "config.h"
 #include <iostream>
-
 #include <unirec/unirec.h>
 #include <libtrap/trap.h>
 #include <getopt.h>
-#include <omp.h>
+#include <pthread.h>
 #include <signal.h>
-#include "fields.h"
 
 using namespace std;
 int exit_value=0;
-static ur_template_t **in_templates = NULL; // UniRec input templates
-static int n_inputs = 0;                    // number of input interface
-trap_ctx_t *ctx = NULL;                     // Trap context interface
-int stop = 0;                               // Tmp local variable 
-int ret = 2;                                // Tmp local variable
-int verbose = 0;                            // Vebose level
-trap_module_info_t *module_info = NULL;     // Trap module info structure
-
-// Data packet fromat between Mux and Demux
+static ur_template_t **in_templates = NULL; //UniRec input templates
+static int n_inputs = 0; //number of input interface
+trap_ctx_t *ctx = NULL;
+int stop = 0;
+int ret = 2;
+int verbose = 0;
+trap_module_info_t *module_info = NULL;
+pthread_mutex_t mtx;
+
 typedef struct meta_info_s {
-    uint16_t messageID; // 1 - normal data, 2 - hello message (unirec fmt changed)
-    uint16_t interfaceID;
-    uint8_t data_fmt;
-    char payload[0];
+   uint16_t messageID; //1 - normal data, 2 - hello message (unirec fmt changed)
+   uint16_t interfaceID;
+   uint8_t data_fmt;
+   char payload[0];
 } meta_info_t;
 
 #define MODULE_BASIC_INFO(BASIC) \
-  BASIC("mux","This module unite more input interfaces into one output interface",-1,1)
+  BASIC("mux", "This module unites more input interfaces into one output interface", -1, 1)
 #define MODULE_PARAMS(PARAM) \
-PARAM('n', "link_count", "Sets count of input links. Must correspond to parameter -i (trap).", required_argument, "int32")
-
-void capture_thread(int index){
-
-const void *data_nemea_input = NULL; // Received data 
-uint16_t memory_received = 0;        // Tmp local variable
-uint8_t data_fmt = TRAP_FMT_UNKNOWN; // Tmp local variable
-const char *spec = NULL;             // tmp local variable
-
-
-    // Set output interface format
-    trap_ctx_set_data_fmt(ctx, 0, TRAP_FMT_RAW);
-
-    // Allocate structure with new header and data payload
-    meta_info_t *meta_data;
-    char *buffer[65535];
-    meta_data = (meta_info_t *) buffer;
-    // Main loop
-    while (!stop){
-        ret = trap_ctx_recv(ctx,index,&data_nemea_input,&memory_received);
-        // === Process received data ===
-        if (ret == TRAP_E_OK | ret == TRAP_E_FORMAT_CHANGED){
-            if (ret == TRAP_E_FORMAT_CHANGED){
-                // Get input interface format
-                if (trap_ctx_get_data_fmt(ctx, TRAPIFC_INPUT, index, &data_fmt, &spec) != TRAP_E_OK){
-                    cerr << "ERROR: Data format was not loaded." << endl;
-                    return;
-                }
-
-                if (verbose >= 0){
-                    cout << "Data format has been changed. Sending hello message" << endl;
-                }
-            
-                // Fill in hello message
-                meta_data->messageID = 2;
-                meta_data->interfaceID = index;
-                meta_data->data_fmt = data_fmt;
-                memcpy(meta_data->payload, spec,strlen(spec)+1);
-                #pragma omp critical
-                {
-                    ret = trap_ctx_send(ctx,0,buffer,sizeof(*meta_data)+strlen(spec)+1);
-                }
-
-            } // Endif ret == TRAP_E_FORMAT_CHANGED
-
-                // Forward received payload data
-                meta_data->messageID = 1;
-                meta_data->interfaceID = index;
-                meta_data->data_fmt = data_fmt;
-                memcpy(meta_data->payload, data_nemea_input,memory_received);
-        
-        // Endif ret == TRAP_E_OK | ret == TRAP_E_FORMAT_CHANGED
-        }  else{
-            cerr << "ERROR: Undefined option on input interface" << endl;
-            meta_data->messageID = -1;
-            meta_data->interfaceID = index;
-        }
-        
-        // Send data out   
-        #pragma omp critical
-        {
-            ret = trap_ctx_send(ctx,0,buffer,sizeof(*meta_data)+memory_received);
-            if (verbose >= 0){
-                cout << "Iterface with index " << index << " sent data out" << endl;
+  PARAM('n', "link_count", "Sets count of input links. Must correspond to parameter -i (trap).", required_argument, "int32")
+
+void *capture_thread(void *arg)
+{
+   int index =  *(int *) arg, ret;
+   const void *data_nemea_input = NULL;
+   uint16_t memory_received = 0;
+   uint8_t data_fmt = TRAP_FMT_UNKNOWN;
+   const char *spec = NULL;
+
+   //set output interface format
+   trap_ctx_set_data_fmt(ctx, 0, TRAP_FMT_RAW);
+
+   //allocate structure with new header and data payload
+   meta_info_t *meta_data;
+   char *buffer[65535];
+   meta_data = (meta_info_t *) buffer;
+   //main loop
+   while (!stop) {
+      ret = trap_ctx_recv(ctx, index, &data_nemea_input, &memory_received);
+      //=== process received data ===
+      if (ret == TRAP_E_OK | ret == TRAP_E_FORMAT_CHANGED) {
+         if (ret == TRAP_E_FORMAT_CHANGED) {
+            //get input interface format
+            if (trap_ctx_get_data_fmt(ctx, TRAPIFC_INPUT, index, &data_fmt, &spec) != TRAP_E_OK) {
+               cerr << "ERROR: Data format was not loaded." << endl;
+               return NULL;
+            }
+
+            if (verbose >= 0) {
+               cout << "Data format has been changed. Sending hello message" << endl;
             }
-        }
-    }// End while (!stop){
+
+            //fill in hello message
+            meta_data->messageID = 2;
+            meta_data->interfaceID = index;
+            meta_data->data_fmt = data_fmt;
+            memcpy(meta_data->payload, spec, strlen(spec) + 1);
+            pthread_mutex_lock(&mtx);
+            ret = trap_ctx_send(ctx, 0, buffer, sizeof(*meta_data) + strlen(spec) + 1);
+            pthread_mutex_unlock(&mtx);
+
+         }
+
+         //forward received payload data
+         meta_data->messageID = 1;
+         meta_data->interfaceID = index;
+         meta_data->data_fmt = data_fmt;
+         memcpy(meta_data->payload, data_nemea_input, memory_received);
+      } else{
+         //endif ret == TRAP_E_OK | ret == TRAP_E_FORMAT_CHANGED
+         cerr << "ERROR: Undefined option on input interface" << endl;
+         meta_data->messageID = -1;
+         meta_data->interfaceID = index;
+      }
+
+      //send data out
+      pthread_mutex_lock(&mtx);
+      ret = trap_ctx_send(ctx, 0, buffer, sizeof(*meta_data) + memory_received);
+      if (verbose >= 0) {
+        cout << "Iterface with index " << index << " sent data out" << endl;
+      }
+      pthread_mutex_unlock(&mtx);
+   } //end while (!stop)
 }
 
-int main (int argc, char ** argv){
-    // Allocate and initialize module_info structure and all its members
-    INIT_MODULE_INFO_STRUCT(MODULE_BASIC_INFO, MODULE_PARAMS)
-    // Trap parameters processing
-    trap_ifc_spec_t ifc_spec;
-    ret = trap_parse_params(&argc, argv, &ifc_spec);
-    if (ret != TRAP_E_OK) {
-        if (ret == TRAP_E_HELP) { // "-h" was found
-        trap_print_help(module_info);
-        return 0;
-        }
-        cerr << "ERROR in parsing of parameters for TRAP: " << trap_last_error_msg << endl;
-        return 1;
-    }
+int main (int argc, char ** argv)
+{
+   //allocate and initialize module_info structure and all its members
+   INIT_MODULE_INFO_STRUCT(MODULE_BASIC_INFO, MODULE_PARAMS)
+   //trap parameters processing
+   trap_ifc_spec_t ifc_spec;
+   ret = trap_parse_params(&argc, argv, &ifc_spec);
+   if (ret != TRAP_E_OK) {
+      if (ret == TRAP_E_HELP) { // "-h" was found
+         trap_print_help(module_info);
+         return 0;
+      }
+      cerr << "ERROR in parsing of parameters for TRAP: " << trap_last_error_msg << endl;
+      return 1;
+   }
 
-    // Parse remaining parameters and get configuration
-    signed char opt;
-    while ((opt = TRAP_GETOPT(argc, argv, module_getopt_string, long_options)) != -1) {
-        switch (opt) {
-        case 'n':
-            n_inputs = atoi(optarg);
-            break;
-        default:
-            cerr << "Error: Invalid arguments." << endl;
-            FREE_MODULE_INFO_STRUCT(MODULE_BASIC_INFO, MODULE_PARAMS)
-            return 1;
-        }
-    }
+   //parse remaining parameters and get configuration
+   signed char opt;
+   while ((opt = TRAP_GETOPT(argc, argv, module_getopt_string, long_options)) != -1) {
+      switch (opt) {
+      case 'n':
+         n_inputs = atoi(optarg);
+         break;
+      default:
+         cerr << "Error: Invalid arguments." << endl;
+         FREE_MODULE_INFO_STRUCT(MODULE_BASIC_INFO, MODULE_PARAMS)
+         return 1;
+      }
+   }
 
-    verbose = trap_get_verbose_level();
-    if (verbose >= 0) {
-        cout << "Verbosity level: " <<  trap_get_verbose_level() << endl;;
-    }
+   verbose = trap_get_verbose_level();
+   if (verbose >= 0) {
+      cout << "Verbosity level: " <<  trap_get_verbose_level() << endl;;
+   }
 
-    if (verbose >= 0) {
-        cerr << "Number of inputs: " <<  n_inputs << endl;
-    }
-   
-    // Check input parameter 
-    if (n_inputs < 1) {
-        cerr <<  "Error: Number of input interfaces must be positive integer." << endl;
-        FREE_MODULE_INFO_STRUCT(MODULE_BASIC_INFO, MODULE_PARAMS)
-        return 0;
-    }
-    if (n_inputs > 32) {
-        cerr << "Error: More than 32 interfaces is not allowed by TRAP library." << endl;
-        FREE_MODULE_INFO_STRUCT(MODULE_BASIC_INFO, MODULE_PARAMS)
-        return 4;
-    }
+   if (verbose >= 0) {
+      cerr << "Number of inputs: " <<  n_inputs << endl;
+   }
 
-    // Set number of input interfaces
-    module_info->num_ifc_in = n_inputs;
+   //check input parameter
+   if (n_inputs < 1) {
+      cerr <<  "Error: Number of input interfaces must be positive integer." << endl;
+      exit_value = 2;
+      goto cleanup;
+   }
+   if (n_inputs > 32) {
+      cerr << "Error: More than 32 interfaces is not allowed by TRAP library." << endl;
+      exit_value = 2;
+      goto cleanup;
+   }
 
-    if (verbose >= 0) {
-        cout << "Initializing TRAP library ..." << endl;
-    }
+   // Set number of input interfaces
+   module_info->num_ifc_in = n_inputs;
 
-    ctx = trap_ctx_init(module_info, ifc_spec);
+   if (verbose >= 0) {
+      cout << "Initializing TRAP library ..." << endl;
+   }
 
-    if (ctx == NULL){
-        cerr << "ERROR in TRAP initialization: " << trap_last_error_msg << endl;
-        exit_value=1;
-        goto cleanup;
-    }
+   ctx = trap_ctx_init(module_info, ifc_spec);
 
+   if (ctx == NULL) {
+      cerr << "ERROR in TRAP initialization: " << trap_last_error_msg << endl;
+      exit_value = 3;
+      goto cleanup;
+   }
 
-    // Check if number of interfaces is correct
-    if (strlen(ifc_spec.types) <= 1){
-        cerr << "ERROR expected at least 1 input and 1 output interface. Got only 1." << endl;
-        return 1;
-    }
 
-    // Check if number of input interfaces is correct
-    if (strlen(ifc_spec.types)-1 != n_inputs){
-        cerr << "ERROR number of input interfaces is incorrect" << endl;
-        goto cleanup;
-    }
+   //check if number of interfaces is correct
+   if (strlen(ifc_spec.types) <= 1) {
+      cerr << "ERROR expected at least 1 input and 1 output interface. Got only 1." << endl;
+      return 2;
+   }
 
-    // Output interface control settings
-    if (trap_ctx_ifcctl(ctx, TRAPIFC_OUTPUT,0,TRAPCTL_SETTIMEOUT,TRAP_NO_WAIT) != TRAP_E_OK){
-        cerr << "ERROR in output interface initialization" << endl;
-        exit_value=2;
-        goto cleanup;
-    }
-    
-    
-    // Allocace memory for input templates
-    in_templates = (ur_template_t**)calloc(n_inputs,sizeof(*in_templates));
-    if (in_templates == NULL){
-        cerr <<  "Memory allocation error." << endl;
-        goto cleanup;
-    }
+   //check if number of input interfaces is correct
+   if (strlen(ifc_spec.types)-1 != n_inputs) {
+      cerr << "ERROR number of input interfaces is incorrect" << endl;
+      exit_value = 2;
+      goto cleanup;
+   }
 
-    // Initialize and set templates for UniRec negotiation
-    for (int i = 0; i < n_inputs; i++){
-        // Input interfaces control settings
-        if (trap_ctx_ifcctl(ctx, TRAPIFC_INPUT,i,TRAPCTL_SETTIMEOUT,TRAP_WAIT) != TRAP_E_OK){
-            cerr << "ERROR in input interface initialization" << endl;
-            exit_value=2;
-            goto cleanup;
-        }
-        // Create empty input template
-        in_templates[i] = ur_ctx_create_input_template(ctx,i,NULL,NULL);
-        if (in_templates[i] == NULL){
-            cerr <<  "Memory allocation error." << endl;
-            goto cleanup;
-        }
-        // Set required incoming format
-        trap_ctx_set_required_fmt(ctx,i,TRAP_FMT_UNIREC,NULL);
-    }
+   //output interface control settings
+   if (trap_ctx_ifcctl(ctx, TRAPIFC_OUTPUT, 0, TRAPCTL_SETTIMEOUT, TRAP_NO_WAIT) != TRAP_E_OK) {
+      cerr << "ERROR in output interface initialization" << endl;
+      exit_value = 3;
+      goto cleanup;
+   }
 
-    if (verbose >= 0){
-        cout << "Initialization done" << endl;
-    }
 
-    #pragma omp parallel num_threads(n_inputs)
-    {
-        capture_thread(omp_get_thread_num());
+   //allocate memory for input templates
+   in_templates = (ur_template_t**) calloc(n_inputs, sizeof(*in_templates));
+   if (in_templates == NULL) {
+      cerr <<  "Memory allocation error." << endl;
+      exit_value = 3;
+      goto cleanup;
+   }
+
+   //initialize and set templates for UniRec negotiation
+   for (int i = 0; i < n_inputs; i++) {
+      //input interfaces control settings
+      if (trap_ctx_ifcctl(ctx, TRAPIFC_INPUT, i, TRAPCTL_SETTIMEOUT, TRAP_WAIT) != TRAP_E_OK) {
+         cerr << "ERROR in input interface initialization" << endl;
+         exit_value = 3;
+         goto cleanup;
+      }
+      //create empty input template
+      in_templates[i] = ur_ctx_create_input_template(ctx, i, NULL, NULL);
+      if (in_templates[i] == NULL) {
+         cerr <<  "Memory allocation error." << endl;
+         exit_value = 3;
+         goto cleanup;
+      }
+      //set required incoming format
+      trap_ctx_set_required_fmt(ctx, i, TRAP_FMT_UNIREC, NULL);
+   }
+
+   if (verbose >= 0) {
+      cout << "Initialization done" << endl;
+   }
+
+   {
+    int *interfaces = (int *) malloc(n_inputs * sizeof(int));
+    pthread_t *threads = (pthread_t *) malloc(n_inputs * sizeof(pthread_t));
+    pthread_attr_t attr;
+    pthread_attr_init(&attr);
+    pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_JOINABLE);
+    pthread_mutex_init(&mtx, NULL);
+    for (int i = 0; i < n_inputs; i++) {
+       interfaces[i] = i;
+       if (pthread_create(&threads[i], &attr, capture_thread, &interfaces[i]) != 0) {
+          fprintf(stderr, "pthread_create() failed\n");
+          pthread_attr_destroy(&attr);
+          pthread_mutex_destroy(&mtx);
+          free(threads);
+          free(interfaces);
+          goto cleanup;
+       }
+    }
+    pthread_attr_destroy(&attr);
+   
+    for (int i = 0; i < n_inputs; i++) {
+       pthread_join(threads[i], NULL);
     }
-    
+    pthread_mutex_destroy(&mtx);
+    free(threads);
+    free(interfaces); 
+   
+    exit_value = 0;
+   }
+   
 cleanup:
-    // Cleaning
-    trap_ctx_finalize(&ctx);
-    return 0;
+   if (verbose >= 0) {
+      printf("Exitting ...\n");
+   }
+
+   trap_terminate(); // This have to be called before trap_finalize(), otherwise it may crash (don't know if feature or bug in TRAP)
+
+   // Do all necessary cleanup before exiting
+   TRAP_DEFAULT_FINALIZATION();
+
+   if (in_templates) {
+      for (int i = 0; i < n_inputs; i++) {
+         ur_free_template(in_templates[i]);
+      }
+   free(in_templates);
+   }
+
+   ur_finalize();
+   FREE_MODULE_INFO_STRUCT(MODULE_BASIC_INFO, MODULE_PARAMS)
+
+   return exit_value;
 }
